//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "XMPPStreamDelegate.h"

@class NSDate, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString, WATimer, XMPPConnectionConfiguration, XMPPStream;

@interface XMPPConnection : NSObject <XMPPStreamDelegate>
{
    XMPPStream *_stream;
    NSObject<OS_dispatch_source> *_checkConnectionTimer;
    NSObject<OS_dispatch_source> *_checkFieldStatsTimer;
    WATimer *_updatePresenceTimer;
    NSMutableSet *_deferredSubscribes;
    NSMutableDictionary *_clientData;
    NSMutableDictionary *_unsentMessages;
    NSMutableDictionary *_timers;
    NSMutableDictionary *_unsentCallStanzas;
    unsigned long long _lastSentPresence;
    _Bool _firstOfflineMessageReceived;
    _Bool _receivedLastChanceOfflineMessage;
    NSMutableArray *_recentlySentAcks;
    NSMutableArray *_acks;
    int _connectionHandlersLock;
    NSMutableArray *_connectionHandlers;
    int _stateLock;
    NSDictionary *_stateChangeCallbacks;
    unsigned long long _state;
    unsigned long long _networkStatus;
    int _networkStatusLock;
    XMPPConnectionConfiguration *_config;
    NSObject<OS_dispatch_queue> *_xmppQueue;
    _Bool _isHoldingConnectionLock;
    long long _backgroundConnectionAttempts;
    long long _foregroundConnectionAttempts;
    double _connectionAttemptStartTime;
    double _connectionStartTime;
    NSMutableArray *_pendingRequests;
    _Bool _voipNetworkDidChange;
    _Bool _checkConnectionScheduledOnStateChange;
    NSMutableArray *_connectionConditionals;
    _Bool _isConnectionCheckingInProgress;
    _Bool _isDisconnectRequested;
    long long _suppressReconnectCounter;
    NSMutableArray *_internalDisconnectCallbacks;
    struct __SCNetworkReachability *_reachabilityRef;
    CDStruct_4210025a _reachabilityContext;
    _Bool _active;
    NSString *_serviceType;
    NSDate *_accountCreation;
    NSDate *_accountExpiration;
    double _serverTimeShift;
    NSString *_serverPropsVersion;
    id <XMPPConnectionDelegate> _delegate;
    double _voipPushDelayWithSkew;
}

+ (id)stateToString:(unsigned long long)arg1;
@property double voipPushDelayWithSkew; // @synthesize voipPushDelayWithSkew=_voipPushDelayWithSkew;
@property(nonatomic) __weak id <XMPPConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSString *serverPropsVersion; // @synthesize serverPropsVersion=_serverPropsVersion;
@property double serverTimeShift; // @synthesize serverTimeShift=_serverTimeShift;
@property(retain) NSDate *accountExpiration; // @synthesize accountExpiration=_accountExpiration;
@property(retain) NSDate *accountCreation; // @synthesize accountCreation=_accountCreation;
@property(retain) NSString *serviceType; // @synthesize serviceType=_serviceType;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
- (void).cxx_destruct;
- (void)sendCallReceiptOrAck:(id)arg1;
- (void)sendCallStanza:(id)arg1;
- (void)endCallStanzaTimeout:(id)arg1;
- (void)startCallStanzaTimeout:(id)arg1;
- (void)removeCallWatchdogs;
- (id)createPresence:(unsigned long long)arg1 withNickname:(id)arg2;
- (id)convertOutgoingEmojiString:(id)arg1;
- (void)requestCapabilityForJIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestBroadcastListsWithCompletion:(CDUnknownBlockType)arg1;
- (void)deleteBroadcastListFromServer:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)cleanDirtyBits:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)queryServerPropertiesWithCompletion:(CDUnknownBlockType)arg1;
- (void)stopLocationSharingForGroupWithJID:(id)arg1;
- (void)requestLocationSharingForGroupWithJID:(id)arg1 reportParticipants:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setLocationSharingEndTime:(id)arg1 forGroupWithJID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)reportLocation:(id)arg1;
- (_Bool)hasPendingRequestsForGroupWithJID:(id)arg1 participantJID:(id)arg2;
- (void)requestParticipatingGroupsWithCompletion:(CDUnknownBlockType)arg1;
- (void)deleteGroupWithJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)leaveGroupWithJID:(id)arg1 requestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestInfoForGroupWithJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)demoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)promoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addParticipants:(id)arg1 toGroupWithJID:(id)arg2 requestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)removeParticipants:(id)arg1 fromGroupWithJID:(id)arg2 requestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setSubject:(id)arg1 forGroupWithJID:(id)arg2 requestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)createGroupWithSubject:(id)arg1 participantJIDs:(id)arg2 key:(id)arg3 locked:(_Bool)arg4 requestID:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)sendServerErrorReceiptForMessage:(id)arg1;
- (void)sendAckForNotification:(id)arg1;
- (void)sendDeliveryReceiptsForMessages:(id)arg1;
- (void)sendRetryReceiptForMessage:(id)arg1 retryCount:(int)arg2;
- (void)sendRetryReceiptForMessageId:(id)arg1 toJID:(id)arg2 participant:(id)arg3 retryCount:(int)arg4 timeAttribute:(id)arg5;
- (void)sendErrorNoEncryptionReceiptForMessage:(id)arg1 withType:(id)arg2;
- (void)sendDeliveryReceiptsForChatMessages:(id)arg1;
- (void)sendReadReceiptsForChatMessages:(id)arg1;
- (void)sendPlayedReceiptForMessage:(id)arg1;
- (void)reachabilityDidChangeWithFlags:(unsigned int)arg1;
- (void)connectIfPossible;
- (void)checkConnection;
- (_Bool)isSocketHealthy;
- (void)forceLeaveFetchOfflineStateIfNeeded;
@property(readonly, getter=isConnected) _Bool connected;
- (void)connect;
- (void)resetConnectionAttempts;
- (void)reallyConnect;
- (void)checkFieldStats;
- (void)uploadFieldStats;
- (void)closeStream;
- (void)xmppStreamDidBecomeIdle:(id)arg1;
- (_Bool)xmppStream:(id)arg1 didReceiveLoginResponseStanza:(id)arg2;
- (void)xmppStream:(id)arg1 initialConfigurationAsync:(CDUnknownBlockType)arg2;
- (void)xmppStreamDidClose:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveCustomStanza:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveNotification:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveChatState:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveAck:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveReceipt:(id)arg2;
- (void)xmppStream:(id)arg1 didReceivePresence:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveMessages:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveIQ:(id)arg2;
- (void)xmppStreamDidNotAuthenticate:(id)arg1 lockDuration:(double)arg2 retryAfter:(double)arg3 reasonCode:(long long)arg4;
- (void)xmppStreamDidAuthenticate:(id)arg1 attributes:(id)arg2;
- (void)xmppStreamDidOpen:(id)arg1;
- (void)sendIQResponse:(id)arg1;
- (id)createPresenceWithType:(unsigned long long)arg1 nickname:(id)arg2;
- (id)processIncomingMessageStanzas:(id)arg1;
- (int)fieldStatsMeticForAxolotlError:(int)arg1;
- (void)reportVoipPushDelay:(double)arg1;
- (void)changeStatus:(unsigned long long)arg1 forIncomingMessageWithStanzaID:(id)arg2 fromJID:(id)arg3 participantJID:(id)arg4;
- (void)syncPhoneNumbers:(id)arg1 deletedJIDs:(id)arg2 mode:(unsigned long long)arg3 context:(unsigned long long)arg4 timeout:(double)arg5 completion:(CDUnknownBlockType)arg6;
- (void)requestSyncWithContext:(id)arg1;
- (void)reloadPassword;
- (void)sendRecoveryToken:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)ackMediaForURLString:(id)arg1 sourceIsSelf:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestUploadUrlForFileHash:(id)arg1 origHash:(id)arg2 filetype:(id)arg3 filesize:(id)arg4 mediaIndex:(long long)arg5 totalMediaCount:(long long)arg6 completion:(CDUnknownBlockType)arg7;
- (void)internalRequestUploadUrlForFileHash:(id)arg1 origHash:(id)arg2 filetype:(unsigned long long)arg3 filesize:(long long)arg4 mediaIndex:(long long)arg5 totalMediaCount:(long long)arg6 completion:(CDUnknownBlockType)arg7;
- (void)ping;
- (void)getStatusForJIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setStatus:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)submitPaymentReceipt:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)changeNumberWithUsername:(id)arg1 password:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)normalizePhoneNumber:(id)arg1 countryCode:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)deleteAccountWithFeedback:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendBlockedContactsList:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)getBlockedContactsListWithCompletion:(CDUnknownBlockType)arg1;
- (void)getProfilePictureIDsForJIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)getProfilePictureForJID:(id)arg1 type:(unsigned long long)arg2 identifier:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setProfilePictureForJID:(id)arg1 pictureData:(id)arg2 previewData:(id)arg3 requestID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)sendPushConfig:(id)arg1 includeGroups:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setNotificationsConfig:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setPrivacySettings:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)queryPrivacySettingsWithCompletion:(CDUnknownBlockType)arg1;
- (void)updatePresence;
- (void)sendPushName:(id)arg1;
- (void)sendPresenceWithNickname:(id)arg1;
- (void)resetCachedLastSeen;
- (id)lastSeenTimestampForJID:(id)arg1;
- (unsigned long long)latestChatStateForGroupWithJID:(id)arg1 returningParticipantJID:(out id *)arg2;
- (unsigned long long)chatStateForContactWithJID:(id)arg1;
- (void)checkIncomingChatStateForJID:(id)arg1 participantJID:(id)arg2;
- (void)setIncomingChatState:(unsigned long long)arg1 forJID:(id)arg2 participantJID:(id)arg3;
- (void)reportChatState:(unsigned long long)arg1 forJID:(id)arg2;
- (void)presenceSubscribeToJIDIfNecessary:(id)arg1;
- (void)resetAllChatStatesAndClearSubscriptions:(_Bool)arg1;
- (void)removeClientDataForJID:(id)arg1;
- (id)addClientDataForJID:(id)arg1;
- (id)clientDataForJID:(id)arg1;
- (_Bool)isOnline:(id)arg1;
- (void)sendSharedItem:(id)arg1;
- (void)respondToServerErrorReceiptByResendingMessage:(id)arg1;
- (void)sendMessage:(id)arg1;
- (void)sendMessageStanza:(id)arg1;
- (void)endMessageTimeout:(id)arg1;
- (void)startMessageTimeout:(id)arg1;
- (void)markMessagesAsUnsent;
- (void)resendUnsentCallStanzas;
- (void)resendUnsentMessages;
@property(readonly) unsigned long long serverConnectionStatus;
- (void)setNetworkStatus:(unsigned long long)arg1;
@property(readonly) unsigned long long networkStatus;
- (void)setIPAddressHint:(id)arg1;
- (void)drop;
- (void)disconnectIfStuckInConnecting;
- (void)disconnect;
- (void)performBlock:(CDUnknownBlockType)arg1 onQueue:(id)arg2 onConnectionState:(unsigned long long)arg3;
- (void)setState:(unsigned long long)arg1;
@property(readonly) unsigned long long state;
- (void)checkIfConnectionIsAllowedWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)registerConnectionConditional:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
@property(readonly, nonatomic) unsigned short currentPort;
@property(readonly, nonatomic) NSString *currentHost;
@property(readonly, nonatomic) NSString *currentIP;
- (void)setXmppUser:(id)arg1;
- (void)cancelAllRequests;
- (void)resendAllPendingRequests;
- (void)enqueueRequest:(id)arg1;
- (_Bool)isRequestPending:(id)arg1;
- (void)notifyConnectionHandlersOfOfflineMarker;
- (void)removeConnectionHandler:(id)arg1;
- (void)addConnectionHandler:(id)arg1;
@property(readonly, copy, nonatomic) NSString *genericNetworkErrorMessage;
@property(readonly, copy, nonatomic) NSString *networkStatusErrorMessage;
- (void)systemTimeChanged:(id)arg1;
- (void)performBlockOnXMPPQueue:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithConfiguration:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

